<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ui on dotsquid</title>
    <link>http://dotsquid.com/tags/ui/index.xml</link>
    <description>Recent content in Ui on dotsquid</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Proudly made in [Ukraine](https://en.wikipedia.org/wiki/Ukraine). Powered by [Hugo](//gohugo.io).</copyright>
    <atom:link href="http://dotsquid.com/tags/ui/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why I don&#39;t like Dictionary.TryGetValue and how I made it better (I hope)</title>
      <link>http://dotsquid.com/2017/05/31/dictionary-trygetvalue</link>
      <pubDate>Wed, 31 May 2017 21:22:23 +0200</pubDate>
      
      <guid>http://dotsquid.com/2017/05/31/dictionary-trygetvalue</guid>
      <description>&lt;p&gt;The most annoying thing of &lt;code&gt;Dictionary.TryGetValue&lt;/code&gt; is that it returns a default value of &lt;code&gt;value&lt;/code&gt; parameter if &lt;code&gt;key&lt;/code&gt; is not found. E.g. if &lt;code&gt;value&lt;/code&gt; is of &lt;code&gt;float&lt;/code&gt; type it will be &lt;code&gt;0.0f&lt;/code&gt;.&lt;br /&gt;
Because of that you have to check the returned &lt;code&gt;bool&lt;/code&gt; and if it&amp;rsquo;s &lt;code&gt;false&lt;/code&gt; you have to assign the value you need. It looks as follows&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/dotsquid/dff16aed638d582593e455621176cecd.js?file=Dislike.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;As you can see now we have to deal with redundant &lt;code&gt;if&lt;/code&gt; statement which makes code not so clean and neat as it could be.&lt;br /&gt;
How about this one?&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/dotsquid/dff16aed638d582593e455621176cecd.js?file=Like.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Fortunately it&amp;rsquo;s quite easy to make it real with an extension class like as follows&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;//gist.github.com/dotsquid/dff16aed638d582593e455621176cecd.js?file=DictionaryUtility.cs&#34;&gt;&lt;/script&gt;&lt;br /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>StableEnum or: How I Learned to Stop Worrying and Love the Enums in Unity3d</title>
      <link>http://dotsquid.com/2017/04/17/stable-enum</link>
      <pubDate>Mon, 17 Apr 2017 23:44:46 +0200</pubDate>
      
      <guid>http://dotsquid.com/2017/04/17/stable-enum</guid>
      <description>&lt;p&gt;It&amp;rsquo;s a well-known problem with serialization of enums in Unity3d:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use enum as a serialized field in your &lt;code&gt;MonoBehaviour&lt;/code&gt; or &lt;code&gt;ScriptableObject&lt;/code&gt; (or anything serializable).&lt;/li&gt;
&lt;li&gt;Fine-tune everything and code your game further casually.&lt;/li&gt;
&lt;li&gt;Add some new enumerators in the middle of your enum.&lt;/li&gt;
&lt;li&gt;BAM!! You are screwed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What happened? Nothing fancy: new enumerators of your enum just shifted down the old ones occupying their values, because Unity serializes enums as ints.&lt;br /&gt;
Solution is easy: serialize enums as strings. And &lt;a href=&#34;https://github.com/dotsquid/StableEnum&#34;&gt;&lt;strong&gt;StableEnum&lt;/strong&gt;&lt;/a&gt; will help you with this.&lt;br /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nested canvas bug</title>
      <link>http://dotsquid.com/2017/04/08/nested-canvas-bug</link>
      <pubDate>Sat, 08 Apr 2017 00:30:38 +0300</pubDate>
      
      <guid>http://dotsquid.com/2017/04/08/nested-canvas-bug</guid>
      <description>&lt;p&gt;Weird bug related to &lt;code&gt;UI.Canvas&lt;/code&gt; was accidentally found by me while I was developing new menu for our upcoming game &lt;a href=&#34;https://twitter.com/SummerCatchers&#34;&gt;SummerCatchers&lt;/a&gt;. Btw, follow us ;)&lt;br /&gt;
As far as you may know &lt;code&gt;Canvas&lt;/code&gt; can have other &lt;code&gt;Canvases&lt;/code&gt; as children objects. This is very useful in optimization purpose because &lt;code&gt;sub-canvas&lt;/code&gt; isolates its UI elements from other canvases (parent and siblings) thus modifying one of its children won&amp;rsquo;t cause rebuilding of batched mesh for other canvases.&lt;br /&gt;
The bug is as follows.&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;Canvas&lt;/code&gt; has a nested &lt;code&gt;Canvas&lt;/code&gt; disabling and subsequent enabling of an outer &lt;code&gt;Canvas&lt;/code&gt; causes an inner one to weirdly modify and &amp;ldquo;lock&amp;rdquo; its &lt;code&gt;RectTransform&lt;/code&gt;. By &amp;ldquo;locking&amp;rdquo; I mean that &lt;code&gt;RectTransform&lt;/code&gt; becomes uneditable via Inspector since now its values are driven by &lt;code&gt;Canvas&lt;/code&gt;.&lt;br /&gt;
This bug is already reported to Unity QA team and marked as reproducable and sent to developers for resolution.&lt;br /&gt;
As far as I understand there is no way to workaround this bug. &lt;em&gt;However&lt;/em&gt;, and this may sound funny, this bug motivates &lt;strong&gt;not to disable/enable UI GameObjects&lt;/strong&gt; because &lt;a href=&#34;https://unity3d.com/learn/tutorials/topics/best-practices/other-ui-optimization-techniques-and-tips#disabling-canvas-renderers&#34;&gt;that&amp;rsquo;s not cool and Unity does not like it at all&lt;/a&gt;.

&lt;figure &gt;
    
        &lt;img src=&#34;http://dotsquid.com/images/nested-canvas-bug-demo.gif&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;How to reproduce&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

What causes this bug is wrapped in obscurity because &lt;code&gt;Canvas&lt;/code&gt; is part of core codebase not &lt;a href=&#34;https://bitbucket.org/faceitunity3d/ui/src/f8714333fa84ed681036b02a8a59f93cb3192d08/?at=5.5&#34;&gt;an open source part of UI&lt;/a&gt;. But I guess when we disable an outer &lt;code&gt;Canvas&lt;/code&gt; an inner one realizes its not a &lt;code&gt;sub-canvas&lt;/code&gt; anymore so it must take care of its &lt;code&gt;RectTransform&lt;/code&gt;. But it doesn&amp;rsquo;t want to admit its a &lt;code&gt;sub-canvas&lt;/code&gt; again after outer &lt;code&gt;Canvas&lt;/code&gt; is enabled again. What a tense relationship!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Enum flags in Unity3d Inspector</title>
      <link>http://dotsquid.com/2017/04/05/enum-flag-attribute-plus-property-drawer</link>
      <pubDate>Wed, 05 Apr 2017 21:12:16 +0200</pubDate>
      
      <guid>http://dotsquid.com/2017/04/05/enum-flag-attribute-plus-property-drawer</guid>
      <description>&lt;p&gt;It&amp;rsquo;s quite strange but Unity can&amp;rsquo;t show your enum as bitmask / flags out of the box.&lt;br /&gt;
Fortunately this can be fixed fast and easy.&lt;br /&gt;
&lt;/p&gt;

&lt;h5 id=&#34;step1-attribute&#34;&gt;Step1. Attribute&lt;/h5&gt;

&lt;p&gt;First of all we need an attribute which should inform Unity that we want it to show our enum as flags and not as usual one-option list of enums. That&amp;rsquo;s pretty simple and straightforward.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/dotsquid/9289e275e1a4f5b973416bef00419123.js?file=EnumFlagAttribute.cs&#34;&gt;&lt;/script&gt;

&lt;h5 id=&#34;step2-propertydrawer&#34;&gt;Step2. PropertyDrawer&lt;/h5&gt;

&lt;p&gt;Next part is a custom &lt;code&gt;PropertyDrawer&lt;/code&gt;. Its purpose is to draw a property with which &lt;code&gt;EnumFlagAttribute&lt;/code&gt; was associated.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/dotsquid/9289e275e1a4f5b973416bef00419123.js?file=EnumFlagDrawer.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Nothing special as well. Maybe except the 11-th line where we receive the value of enum from &lt;code&gt;SerializedProperty&lt;/code&gt;. Unity&amp;rsquo;s documentation lacks detailed information about &lt;code&gt;PropertyDrawer.fieldInfo&lt;/code&gt; but that&amp;rsquo;s one of the ways how to use it.&lt;/p&gt;

&lt;h5 id=&#34;step3-usage&#34;&gt;Step3. Usage&lt;/h5&gt;

&lt;p&gt;Usage is easy peasy. Just associate &lt;code&gt;EnumFlag&lt;/code&gt; attribute with an enum field and enjoy your bitmask in the Inspector.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/dotsquid/9289e275e1a4f5b973416bef00419123.js?file=Usage.cs&#34;&gt;&lt;/script&gt;</description>
    </item>
    
  </channel>
</rss>